name: Build MOTSMART Firmware

on:
  push:
    tags:
      - 'v*'                 # Build saat push tag (contoh: v0.3.4-safeoff)
  workflow_dispatch:         # Bisa dijalankan manual dari tab Actions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache PlatformIO & pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio/.cache
            ~/.cache/pip
          key: pio-${{ runner.os }}-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            pio-${{ runner.os }}-

      - name: Install PlatformIO
        run: pip install platformio

      - name: Build firmware (env full, SAFE_MODE forced OFF)
        working-directory: ci_build
        run: |
          pio run -e full -t clean
          pio run -e full -D SAFE_MODE=0

      - name: List built files (debug)
        working-directory: ci_build
        run: |
          echo ">>> Tree of .pio/build/full"
          ls -alR .pio/build/full || true
          echo ">>> Try to show flasher_args.json if present"
          if [ -f .pio/build/full/flasher_args.json ]; then
            cat .pio/build/full/flasher_args.json
          else
            echo "flasher_args.json not found."
          fi

      - name: Upload artifacts (whatever exists)
        uses: actions/upload-artifact@v4
        with:
          name: motsmart-full
          path: |
            ci_build/.pio/build/full/*.bin
            ci_build/.pio/build/full/flasher_args.json
          if-no-files-found: warn

      # OPTIONAL: create merged image only if all parts exist
      - name: Create merged image (optional)
        run: |
          BOOT=$(ls ci_build/.pio/build/full/bootloader*.bin 2>/dev/null | head -n1 || true)
          PART=$(ls ci_build/.pio/build/full/partitions*.bin 2>/dev/null | head -n1 || true)
          APP="ci_build/.pio/build/full/firmware.bin"
          if [ -n "$BOOT" ] && [ -n "$PART" ] && [ -f "$APP" ]; then
            echo "Merging using:"
            echo "  BOOT: $BOOT"
            echo "  PART: $PART"
            echo "  APP : $APP"
            pip install esptool
            # NOTE: use 'merge-bin' (new) not 'merge_bin' (deprecated)
            esptool.py --chip esp32 merge-bin -o ci_build/.pio/build/full/merged_full.bin \
              0x1000 "$BOOT" 0x8000 "$PART" 0x10000 "$APP"
          else
            echo "Skip merge: one or more files missing."
          fi

      - name: Upload merged image (if created)
        if: ${{ hashFiles('ci_build/.pio/build/full/merged_full.bin') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: motsmart-full-merged
          path: ci_build/.pio/build/full/merged_full.bin
          if-no-files-found: warn
