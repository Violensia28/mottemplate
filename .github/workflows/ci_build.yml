
name: Build MOTSMART Firmware (ci_build/full)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      EXTRA_FLAGS: -D SAFE_MODE=0 -D BYPASS_SAFETY=1 -D BUILD_TAG="${{ github.ref_name }}"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache PlatformIO & pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio/.cache
            ~/.cache/pip
          key: pio-${{ runner.os }}-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            pio-${{ runner.os }}-

      - name: Install PlatformIO
        run: pip install platformio esptool

      - name: Clean build folder (env full)
        working-directory: ci_build
        run: pio run -e full -t clean

      - name: Build (env full) with injected EXTRA_FLAGS
        working-directory: ci_build
        run: pio run -e full

      - name: List built files (debug)
        working-directory: ci_build
        run: |
          echo ">>> Effective files in .pio/build/full"
          ls -alR .pio/build/full || true
          echo ">>> flasher_args.json (if any)"
          [ -f .pio/build/full/flasher_args.json ] && cat .pio/build/full/flasher_args.json || echo "not found"

      - name: Upload artifacts (whatever exists)
        uses: actions/upload-artifact@v4
        with:
          name: motsmart-full
          path: |
            ci_build/.pio/build/full/*.bin
            ci_build/.pio/build/full/flasher_args.json
          if-no-files-found: warn

      - name: Create merged image (optional)
        run: |
          BOOT=$(ls ci_build/.pio/build/full/bootloader*.bin 2>/dev/null | head -n1 || true)
          PART=$(ls ci_build/.pio/build/full/partitions*.bin 2>/dev/null | head -n1 || true)
          APP="ci_build/.pio/build/full/firmware.bin"
          if [ -n "$BOOT" ] && [ -n "$PART" ] && [ -f "$APP" ]; then
            echo "Merging:"
            echo "  BOOT: $BOOT"; echo "  PART: $PART"; echo "  APP : $APP";
            esptool.py --chip esp32 merge-bin -o ci_build/.pio/build/full/merged_full.bin               0x1000 "$BOOT" 0x8000 "$PART" 0x10000 "$APP"
          else
            echo "Skip merge: one or more files missing."
          fi

      - name: Upload merged image (if created)
        if: ${{ hashFiles('ci_build/.pio/build/full/merged_full.bin') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: motsmart-full-merged
          path: ci_build/.pio/build/full/merged_full.bin
          if-no-files-found: warn

      - name: Collect release assets
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p ci_build/.pio/build/full/release
          for f in bootloader*.bin partitions*.bin firmware.bin merged_full.bin flasher_args.json; do
            [ -f "ci_build/.pio/build/full/$f" ] && cp "ci_build/.pio/build/full/$f" "ci_build/.pio/build/full/release/";
          done
          ls -al ci_build/.pio/build/full/release || true

      - name: Create GitHub Release & upload assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ci_build/.pio/build/full/release/*
          draft: false
          prerelease: false
