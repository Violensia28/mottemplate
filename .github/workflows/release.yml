name: Release ESP32 CI (DIAG-Python)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO (and show versions)
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install platformio
          echo "== Versions =="; python --version; pio --version; pio system info || true

      - name: Locate PlatformIO project
        id: pio
        shell: bash
        run: |
          set -e
          FILE="$(git ls-files | grep -m1 -E '^platformio\.ini$|.*/platformio\.ini$' || true)"
          if [ -z "$FILE" ]; then
            echo "ERROR: platformio.ini not found in repository." >&2
            exit 1
          fi
          DIR="$(dirname "$FILE")"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Found platformio.ini at: $DIR"

      - name: Show project tree & platformio.ini
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          echo "== TREE (2 levels) ==" && find . -maxdepth 2 -print
          echo "== platformio.ini ==" && sed -n '1,200p' platformio.ini

      # === VALIDATOR PYTHON (aman) ===
      - name: Validate src folder (Python)
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          python - <<'PY'
          import os, re, sys
          ini = 'platformio.ini'
          if not os.path.exists(ini):
              print('ERROR: platformio.ini not found', file=sys.stderr); sys.exit(1)
          src_dir = 'src'
          try:
              with open(ini, 'r', encoding='utf-8', errors='ignore') as f:
                  for line in f:
                      m = re.match(r'^\s*src_dir\s*=\s*(.+)$', line)
                      if m: src_dir = m.group(1).strip()
          except Exception as e:
              print('WARN: failed reading platformio.ini:', e, file=sys.stderr)
          print('Using src_dir:', src_dir)
          found = False
          for root, dirs, files in os.walk(src_dir):
              for fn in files:
                  if fn.endswith('.cpp') or fn.endswith('.ino'):
                      print('Found source:', os.path.join(root, fn))
                      found = True
                      break
              if found: break
          if not found:
              print(f"ERROR: No .cpp/.ino files in {src_dir}", file=sys.stderr)
              sys.exit(1)
          PY

      - name: Snapshot project (for analysis)
        if: always()
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          set -e
          mkdir -p __diag__
          cp platformio.ini __diag__/platformio.ini 2>/dev/null || true
          (echo "== TREE =="; find . -maxdepth 3 -type f -print) > __diag__/tree.txt
          (echo "== HEAD 200 lines platformio.ini =="; sed -n '1,200p' platformio.ini) > __diag__/platformio_dump.txt || true

      - name: Upload project snapshot (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: project-snapshot
          path: |
            ${{ steps.pio.outputs.dir }}/__diag__/platformio.ini
            ${{ steps.pio.outputs.dir }}/__diag__/tree.txt
            ${{ steps.pio.outputs.dir }}/__diag__/platformio_dump.txt
          if-no-files-found: ignore

      - name: Build firmware (capture log)
        id: build
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          set -e
          # WARNING: jangan ada file/folder bernama 'envlist' di proyek
          ( set -o pipefail; pio run -e full -v |& tee build.log )

      - name: Upload build log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ${{ steps.pio.outputs.dir }}/build.log
          if-no-files-found: warn

      - name: Upload .pio/build/full (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pio-build-full
          path: ${{ steps.pio.outputs.dir }}/.pio/build/full/
          if-no-files-found: ignore

      - name: Package firmware
        id: pkg
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          set -e
          OUT=".pio/build/full"
          test -f "$OUT/firmware.bin" || { echo "ERROR: firmware.bin not found at $OUT"; exit 1; }
          mkdir -p dist
          cp "$OUT/firmware.bin"    dist/firmware.bin
          cp "$OUT"/bootloader*.bin dist/bootloader.bin 2>/dev/null || true
          cp "$OUT"/partitions*.bin dist/partitions.bin 2>/dev/null || true
          printf "bootloader.bin @ 0x1000\npartitions.bin @ 0x8000\nfirmware.bin   @ 0x10000\n" > dist/offsets.txt
          (cd dist && sha256sum * > SHA256SUMS.txt)
          ZIP="firmware_${GITHUB_REF_NAME#refs/tags/}.zip"
          (cd dist && zip -9 "../$ZIP" *)
          echo "zipname=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Firmware ${{ github.ref_name }} (DIAG-Python)
          files: |
            ${{ steps.pio.outputs.dir }}/${{ steps.pkg.outputs.zipname }}
            ${{ steps.pio.outputs.dir }}/dist/SHA256SUMS.txt
