name: Release (ESP32 full) + Unzip ZIP Source

on:
  push:
    tags:
      - 'v*.*.*'          # contoh: v0.3.1
  workflow_dispatch:       # bisa dijalankan manual dari tab Actions

env:
  # GANTI ke nama environment build kamu (sesuai di platformio.ini)
  PIO_ENV: full

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write      # perlu untuk bikin Release & upload aset

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install unzip + PlatformIO Core
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install platformio

      # ----- UNZIP OTOMATIS -----
      # Cari file .zip di root repo, lalu ekstrak ke workspace.
      - name: Unzip source (if a ZIP is uploaded)
        id: unzip
        shell: bash
        run: |
          set -e
          # Cari ZIP di repo (root). Ambil yang pertama.
          ZIP="$(ls -1 *.zip 2>/dev/null | head -n1 || true)"
          if [ -z "$ZIP" ]; then
            echo "zip_found=false" >> "$GITHUB_OUTPUT"
            echo "Tidak ada file ZIP di root repo. Lewati langkah unzip."
            exit 0
          fi
          echo "zip_found=true" >> "$GITHUB_OUTPUT"
          echo "ZIP yang ditemukan: $ZIP"

          mkdir -p extracted
          unzip -q "$ZIP" -d extracted

          # Jika di dalam ZIP ada satu folder besar, gunakan folder itu sebagai ROOT
          ROOT="extracted"
          TOPDIRS=$(find extracted -mindepth 1 -maxdepth 1 -type d | wc -l)
          TOPFILES=$(find extracted -mindepth 1 -maxdepth 1 -type f | wc -l)
          if [ "$TOPDIRS" -eq 1 ] && [ "$TOPFILES" -eq 0 ]; then
            ROOT="$(find extracted -mindepth 1 -maxdepth 1 -type d)"
          fi

          echo "Memindahkan isi $ROOT ke workspace..."
          shopt -s dotglob
          mv "$ROOT"/* .
          rm -rf extracted

      # ----- LOCATE platformio.ini (baik dari unzip maupun dari repo langsung) -----
      - name: Locate PlatformIO project dir
        id: pio
        shell: bash
        run: |
          set -e
          FILE="$(git ls-files | grep -m1 -E '^.*platformio\.ini$' || true)"
          if [ -z "$FILE" ]; then
            echo "ERROR: platformio.ini tidak ditemukan di repo setelah unzip."
            echo "Pastikan ZIP berisi proyek PlatformIO lengkap atau upload isi folder (bukan ZIP)."
            exit 1
          fi
          DIR="$(dirname "$FILE")"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Found platformio.ini at: $DIR"

      - name: Show tree (debug)
        working-directory: ${{ steps.pio.outputs.dir }}
        run: |
          echo "=== TREE 2-level ==="
          find . -maxdepth 2 -print

      - name: List PIO environments (debug)
        working-directory: ${{ steps.pio.outputs.dir }}
        run: pio run -t envlist || true

      # ----- BUILD -----
      - name: Build FULL ESP32
        working-directory: ${{ steps.pio.outputs.dir }}
        run: pio run -e $PIO_ENV -v

      # ----- KEMAS ASEt RILIS -----
      - name: Prepare release assets
        id: prep
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          set -e
          OUT=".pio/build/$PIO_ENV"
          mkdir -p dist

          # Ambil file penting (nama bisa berbeda; gunakan pola)
          cp "$OUT"/bootloader*.bin dist/bootloader.bin 2>/dev/null || true
          cp "$OUT"/partitions*.bin dist/partitions.bin 2>/dev/null || true
          cp "$OUT"/firmware.bin    dist/firmware.bin

          # Offsets standar ESP32 (ESP-IDF): 0x1000 / 0x8000 / 0x10000
          cat > dist/offsets.txt <<'EOF'
bootloader.bin @ 0x1000
partitions.bin @ 0x8000
firmware.bin   @ 0x10000
EOF

          cat > dist/readme_android.md <<'EOF'
# Flash dari Android (USB-OTG)
1) Install **ESP32_flash** (Play Store).
2) Hubungkan ESP32 via OTG. Masuk bootloader (tahan **BOOT**, tekan-lepas **EN/RST**, lepas **BOOT**).
3) Flash 3 berkas dengan offset:
   - bootloader.bin → 0x1000
   - partitions.bin → 0x8000
   - firmware.bin   → 0x10000

Catatan:
- Offset di atas mengikuti skema standar ESP32 (ESP‑IDF Partition Tables).
- Jika partisi proyekmu kustom, sesuaikan `offsets.txt`.
EOF

          (cd dist && sha256sum * > SHA256SUMS.txt)
          ZIP="motsmart_full_esp32_${GITHUB_REF_NAME#refs/tags/}.zip"
          (cd dist && zip -9 ../$ZIP *)
          echo "zipname=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "mot-smart-firmware ${{ github.ref_name }} (ESP32 full)"
          draft: false
          prerelease: false
          files: |
            ${{ steps.pio.outputs.dir }}/${{ steps.prep.outputs.zipname }}
            ${{ steps.pio.outputs.dir }}/dist/SHA256SUMS.txt
